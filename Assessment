from http.server import BaseHTTPRequestHandler, HTTPServer
import requests

class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/getTimeStories":
            # Fetch Time.com homepage
            try:
                response = requests.get("https://time.com")
                if response.status_code == 200:
                    stories_json = self.extract_stories(response.text)
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(stories_json.encode('utf-8'))
                else:
                    self.send_error(500, "Failed to fetch Time.com")
            except Exception as e:
                self.send_error(500, f"Error occurred: {str(e)}")

    def extract_stories(self, html):
        # Locate "LATEST STORIES" section
        start_index = html.find('LATEST STORIES')
        if start_index == -1:
            return '[]'

        # Limit the scope to the relevant section of the HTML
        end_index = html.find('</section>', start_index)
        relevant_html = html[start_index:end_index]

        # Initialize storage for stories
        stories = []
        current_pos = 0

        while len(stories) < 6:
            # Find the next story link
            link_start = relevant_html.find('<a href="', current_pos)
            if link_start == -1:
                break
            link_start += len('<a href="')
            link_end = relevant_html.find('"', link_start)
            title_start = relevant_html.find('>', link_end) + 1
            title_end = relevant_html.find('</a>', title_start)

            # Extract and store the title and link
            if link_start != -1 and link_end != -1 and title_start != -1 and title_end != -1:
                link = "https://time.com" + relevant_html[link_start:link_end]
                title = relevant_html[title_start:title_end].strip()
                stories.append({"title": title, "link": link})
                current_pos = title_end
            else:
                break

        # Convert stories list to JSON format
        return str(stories).replace("'", '"')

def run(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler):
    server_address = ('', 8080)
    httpd = server_class(server_address, handler_class)
    print('Starting server on port 8080...')
    httpd.serve_forever()

if __name__ == "__main__":
    run()

